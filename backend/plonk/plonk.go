// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package plonk implements PLONK Zero Knowledge Proof system.
//
// See also
//
// https://eprint.iacr.org/2019/953
package plonk

import (
	"github.com/consensys/gnark-crypto/polynomial"
	"github.com/consensys/gnark/frontend"

	mockcommitment_bls12377 "github.com/consensys/gnark-crypto/ecc/bls12-377/fr/polynomial/mockcommitment"
	mockcommitment_bls12381 "github.com/consensys/gnark-crypto/ecc/bls12-381/fr/polynomial/mockcommitment"
	mockcommitment_bn254 "github.com/consensys/gnark-crypto/ecc/bn254/fr/polynomial/mockcommitment"
	mockcommitment_bw6761 "github.com/consensys/gnark-crypto/ecc/bw6-761/fr/polynomial/mockcommitment"

	backend_bls12377 "github.com/consensys/gnark/internal/backend/bls12-377/cs"
	backend_bls12381 "github.com/consensys/gnark/internal/backend/bls12-381/cs"
	backend_bn254 "github.com/consensys/gnark/internal/backend/bn254/cs"
	backend_bw6761 "github.com/consensys/gnark/internal/backend/bw6-761/cs"

	plonkbls12377 "github.com/consensys/gnark/internal/backend/bls12-377/plonk"
	plonkbls12381 "github.com/consensys/gnark/internal/backend/bls12-381/plonk"
	plonkbn254 "github.com/consensys/gnark/internal/backend/bn254/plonk"
	plonkbw6761 "github.com/consensys/gnark/internal/backend/bw6-761/plonk"

	bls12377witness "github.com/consensys/gnark/internal/backend/bls12-377/witness"
	bls12381witness "github.com/consensys/gnark/internal/backend/bls12-381/witness"
	bn254witness "github.com/consensys/gnark/internal/backend/bn254/witness"
	bw6761witness "github.com/consensys/gnark/internal/backend/bw6-761/witness"
)

// Proof represents a Groth16 proof generated by plonk.Prove
//
// it's underlying implementation is curve specific (see gnark/internal/backend)
type Proof interface {
}

// ProvingKey represents a plonk ProvingKey
//
// it's underlying implementation is strongly typed with the curve (see gnark/internal/backend)
type ProvingKey interface {
}

// VerifyingKey represents a plonk VerifyingKey
//
// it's underlying implementation is strongly typed with the curve (see gnark/internal/backend)
//
// ExportSolidity is implemented for BN254 and will return an error with other curves
type VerifyingKey interface {
}

// Setup prepares the public data associated to a circuit + public inputs.
func Setup(sparseR1cs frontend.CompiledConstraintSystem, polynomialCommitment polynomial.CommitmentScheme) (ProvingKey, VerifyingKey, error) {

	switch _sparseR1cs := sparseR1cs.(type) {
	case *backend_bn254.SparseR1CS:
		var pk plonkbn254.ProvingKey
		var vk plonkbn254.VerifyingKey
		err := plonkbn254.Setup(_sparseR1cs, &pk, &vk, polynomialCommitment)
		if err != nil {
			return nil, nil, err
		}
		return pk, vk, nil

	case *backend_bls12381.SparseR1CS:
		var pk plonkbls12381.ProvingKey
		var vk plonkbls12381.VerifyingKey
		err := plonkbls12381.Setup(_sparseR1cs, &pk, &vk, polynomialCommitment)
		if err != nil {
			return nil, nil, err
		}
		return pk, vk, nil

	case *backend_bls12377.SparseR1CS:
		var pk plonkbls12377.ProvingKey
		var vk plonkbls12377.VerifyingKey
		err := plonkbls12377.Setup(_sparseR1cs, &pk, &vk, polynomialCommitment)
		if err != nil {
			return nil, nil, err
		}
		return pk, vk, nil

	case *backend_bw6761.SparseR1CS:
		var pk plonkbw6761.ProvingKey
		var vk plonkbw6761.VerifyingKey
		err := plonkbw6761.Setup(_sparseR1cs, &pk, &vk, polynomialCommitment)
		if err != nil {
			return nil, nil, err
		}
		return pk, vk, nil

	default:
		panic("unrecognized R1CS curve type")
	}

}

// SetupDummyCommitment is used for testing purposes, it sets up public data with dummy polynomial commitment scheme.
func SetupDummyCommitment(sparseR1cs frontend.CompiledConstraintSystem) (ProvingKey, VerifyingKey, error) {

	switch sparseR1cs.(type) {
	case *backend_bn254.SparseR1CS:
		polynomialCommitment := &mockcommitment_bn254.Scheme{}
		return Setup(sparseR1cs, polynomialCommitment)

	case *backend_bls12381.SparseR1CS:
		polynomialCommitment := &mockcommitment_bls12381.Scheme{}
		return Setup(sparseR1cs, polynomialCommitment)

	case *backend_bls12377.SparseR1CS:
		polynomialCommitment := &mockcommitment_bls12377.Scheme{}
		return Setup(sparseR1cs, polynomialCommitment)

	case *backend_bw6761.SparseR1CS:
		polynomialCommitment := &mockcommitment_bw6761.Scheme{}
		return Setup(sparseR1cs, polynomialCommitment)

	default:
		panic("unrecognized R1CS curve type")
	}

}

// Prove generates PLONK proof from a circuit, associated preprocessed public data, and the witness
func Prove(sparseR1cs frontend.CompiledConstraintSystem, pk ProvingKey, fullWitness frontend.Circuit) (Proof, error) {

	switch _sparseR1cs := sparseR1cs.(type) {
	case *backend_bn254.SparseR1CS:
		w := bn254witness.Witness{}
		if err := w.FromFullAssignment(fullWitness); err != nil {
			return nil, err
		}
		proof, err := plonkbn254.Prove(_sparseR1cs, pk.(*plonkbn254.ProvingKey), w)
		if err != nil {
			return proof, err
		}
		return proof, nil

	case *backend_bls12381.SparseR1CS:
		w := bls12381witness.Witness{}
		if err := w.FromFullAssignment(fullWitness); err != nil {
			return nil, err
		}
		proof, err := plonkbls12381.Prove(_sparseR1cs, pk.(*plonkbls12381.ProvingKey), w)
		if err != nil {
			return proof, err
		}
		return proof, nil

	case *backend_bls12377.SparseR1CS:
		w := bls12377witness.Witness{}
		if err := w.FromFullAssignment(fullWitness); err != nil {
			return nil, err
		}
		proof, err := plonkbls12377.Prove(_sparseR1cs, pk.(*plonkbls12377.ProvingKey), w)
		if err != nil {
			return proof, err
		}
		return proof, nil

	case *backend_bw6761.SparseR1CS:
		w := bw6761witness.Witness{}
		if err := w.FromFullAssignment(fullWitness); err != nil {
			return nil, err
		}
		proof, err := plonkbw6761.Prove(_sparseR1cs, pk.(*plonkbw6761.ProvingKey), w)
		if err != nil {
			return proof, err
		}
		return proof, nil

	default:
		panic("unrecognized R1CS curve type")
	}
}

// Verify verifies a PLONK proof, from the proof, preprocessed public data, and public witness.
func Verify(proof Proof, vk VerifyingKey, publicWitness frontend.Circuit) error {

	switch _proof := proof.(type) {

	case *plonkbn254.Proof:
		w := bn254witness.Witness{}
		if err := w.FromPublicAssignment(publicWitness); err != nil {
			return err
		}
		return plonkbn254.Verify(_proof, vk.(*plonkbn254.VerifyingKey), w)

	case *plonkbls12381.Proof:
		w := bls12381witness.Witness{}
		if err := w.FromPublicAssignment(publicWitness); err != nil {
			return err
		}
		return plonkbls12381.Verify(_proof, vk.(*plonkbls12381.VerifyingKey), w)

	case *plonkbls12377.Proof:
		w := bls12377witness.Witness{}
		if err := w.FromPublicAssignment(publicWitness); err != nil {
			return err
		}
		return plonkbls12377.Verify(_proof, vk.(*plonkbls12377.VerifyingKey), w)

	case *plonkbw6761.Proof:
		w := bw6761witness.Witness{}
		if err := w.FromPublicAssignment(publicWitness); err != nil {
			return err
		}
		return plonkbw6761.Verify(_proof, vk.(*plonkbw6761.VerifyingKey), w)

	default:
		panic("unrecognized proof type")
	}
}
