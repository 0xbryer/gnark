// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by gnark DO NOT EDIT

package mpcsetup

import (
	curve "github.com/consensys/gnark-crypto/ecc/bn254"
	"io"
)

// WriteTo implements io.WriterTo
func (p *Phase1) WriteTo(writer io.Writer) (int64, error) {
	n, err := p.writeTo(writer)
	if err != nil {
		return n, err
	}
	nBytes, err := writer.Write(p.Hash)
	return int64(nBytes) + n, err
}

func (p *Phase1) writeTo(writer io.Writer) (int64, error) {
	toEncode := []interface{}{
		&p.PublicKeys.Tau.SG,
		&p.PublicKeys.Tau.SXG,
		&p.PublicKeys.Tau.XR,
		&p.PublicKeys.Alpha.SG,
		&p.PublicKeys.Alpha.SXG,
		&p.PublicKeys.Alpha.XR,
		&p.PublicKeys.Beta.SG,
		&p.PublicKeys.Beta.SXG,
		&p.PublicKeys.Beta.XR,
		p.Parameters.G1.Tau,
		p.Parameters.G1.AlphaTau,
		p.Parameters.G1.BetaTau,
		p.Parameters.G2.Tau,
		&p.Parameters.G2.Beta,
	}

	enc := curve.NewEncoder(writer)
	for _, v := range toEncode {
		if err := enc.Encode(v); err != nil {
			return enc.BytesWritten(), err
		}
	}
	return enc.BytesWritten(), nil
}

// ReadFrom implements io.ReaderFrom
func (p *Phase1) ReadFrom(reader io.Reader) (int64, error) {
	toEncode := []interface{}{
		&p.PublicKeys.Tau.SG,
		&p.PublicKeys.Tau.SXG,
		&p.PublicKeys.Tau.XR,
		&p.PublicKeys.Alpha.SG,
		&p.PublicKeys.Alpha.SXG,
		&p.PublicKeys.Alpha.XR,
		&p.PublicKeys.Beta.SG,
		&p.PublicKeys.Beta.SXG,
		&p.PublicKeys.Beta.XR,
		&p.Parameters.G1.Tau,
		&p.Parameters.G1.AlphaTau,
		&p.Parameters.G1.BetaTau,
		&p.Parameters.G2.Tau,
		&p.Parameters.G2.Beta,
	}

	dec := curve.NewDecoder(reader)
	for _, v := range toEncode {
		if err := dec.Decode(v); err != nil {
			return dec.BytesRead(), err
		}
	}
	p.Hash = make([]byte, 32)
	nBytes, err := reader.Read(p.Hash)
	return dec.BytesRead() + int64(nBytes), err
}

// WriteTo implements io.WriterTo
func (phase2 *Phase2) WriteTo(writer io.Writer) (int64, error) {
	n, err := phase2.writeTo(writer)
	if err != nil {
		return n, err
	}
	nBytes, err := writer.Write(phase2.Hash)
	return int64(nBytes) + n, err
}

func (c *Phase2) writeTo(writer io.Writer) (int64, error) {
	enc := curve.NewEncoder(writer)
	toEncode := []interface{}{
		&c.PublicKey.SG,
		&c.PublicKey.SXG,
		&c.PublicKey.XR,
		&c.Parameters.G1.Delta,
		c.Parameters.G1.L,
		c.Parameters.G1.Z,
		&c.Parameters.G2.Delta,
	}

	for _, v := range toEncode {
		if err := enc.Encode(v); err != nil {
			return enc.BytesWritten(), err
		}
	}

	return enc.BytesWritten(), nil
}

// ReadFrom implements io.ReaderFrom
func (c *Phase2) ReadFrom(reader io.Reader) (int64, error) {
	dec := curve.NewDecoder(reader)
	toEncode := []interface{}{
		&c.PublicKey.SG,
		&c.PublicKey.SXG,
		&c.PublicKey.XR,
		&c.Parameters.G1.Delta,
		&c.Parameters.G1.L,
		&c.Parameters.G1.Z,
		&c.Parameters.G2.Delta,
	}

	for _, v := range toEncode {
		if err := dec.Decode(v); err != nil {
			return dec.BytesRead(), err
		}
	}

	c.Hash = make([]byte, 32)
	n, err := reader.Read(c.Hash)
	return int64(n) + dec.BytesRead(), err

}

// WriteTo implements io.WriterTo
func (c *Phase2Evaluations) WriteTo(writer io.Writer) (int64, error) {
	enc := curve.NewEncoder(writer)
	toEncode := []interface{}{
		c.G1.A,
		c.G1.B,
		c.G2.B,
	}

	for _, v := range toEncode {
		if err := enc.Encode(v); err != nil {
			return enc.BytesWritten(), err
		}
	}

	return enc.BytesWritten(), nil
}

// ReadFrom implements io.ReaderFrom
func (c *Phase2Evaluations) ReadFrom(reader io.Reader) (int64, error) {
	dec := curve.NewDecoder(reader)
	toEncode := []interface{}{
		&c.G1.A,
		&c.G1.B,
		&c.G2.B,
	}

	for _, v := range toEncode {
		if err := dec.Decode(v); err != nil {
			return dec.BytesRead(), err
		}
	}

	return dec.BytesRead(), nil
}
