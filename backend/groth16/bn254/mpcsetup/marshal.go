// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by gnark DO NOT EDIT

package mpcsetup

import (
	curve "github.com/consensys/gnark-crypto/ecc/bn254"
	"io"
)

func appendToSlice[T any](s []interface{}, v []T) []interface{} {
	for i := range v {
		s = append(s, v[i])
	}
	return s
}

func (p *Phase1) toSlice() []interface{} {
	N := len(p.G2Derived.Tau)
	estimatedNbElems := 5*N + 5
	// size N                                                                    1
	// commitment, proof of knowledge, and ùîæ‚ÇÅ representation for œÑ, Œ±, and Œ≤     9
	// ùîæ‚ÇÇ representation for œÑ and Œ≤                                             2
	// [œÑ‚Å±]‚ÇÅ  for 2 ‚â§ i ‚â§ 2N-2                                                2N-3
	// [œÑ‚Å±]‚ÇÇ  for 2 ‚â§ i ‚â§ N-1                                                  N-2
	// [Œ±œÑ‚Å±]‚ÇÅ for 1 ‚â§ i ‚â§ N-1                                                  N-1
	// [Œ≤œÑ‚Å±]‚ÇÅ for 1 ‚â§ i ‚â§ N-1                                                  N-1

	toEncode := make([]interface{}, 1, estimatedNbElems)

	toEncode[0] = N
	toEncode = p.Principal.Tau.appendRefsToSlice(toEncode)
	toEncode = p.Principal.Alpha.appendRefsToSlice(toEncode)
	toEncode = p.Principal.Beta.appendRefsToSlice(toEncode)

	toEncode = appendToSlice(toEncode, p.G1Derived.Tau[2:])
	toEncode = appendToSlice(toEncode, p.G2Derived.Tau[2:])
	toEncode = appendToSlice(toEncode, p.G1Derived.BetaTau[1:])
	toEncode = appendToSlice(toEncode, p.G1Derived.AlphaTau[1:])

	if len(toEncode) != estimatedNbElems {
		panic("incorrect length estimate")
	}

	return toEncode
}

// WriteTo implements io.WriterTo
func (p *Phase1) WriteTo(writer io.Writer) (int64, error) {

	enc := curve.NewEncoder(writer)
	for _, v := range p.toSlice() {
		if err := enc.Encode(v); err != nil {
			return enc.BytesWritten(), err
		}
	}
	return enc.BytesWritten(), nil
}

// ReadFrom implements io.ReaderFrom
func (p *Phase1) ReadFrom(reader io.Reader) (int64, error) {
	var N uint64
	dec := curve.NewDecoder(reader)
	if err := dec.Decode(&N); err != nil {
		return dec.BytesRead(), err
	}

	p.Initialize(N)
	toDecode := p.toSlice()

	for _, v := range toDecode[1:] { // we've already decoded N
		if err := dec.Decode(v); err != nil {
			return dec.BytesRead(), err
		}
	}
	return dec.BytesRead(), nil
}

// WriteTo implements io.WriterTo
func (phase2 *Phase2) WriteTo(writer io.Writer) (int64, error) {
	n, err := phase2.writeTo(writer)
	if err != nil {
		return n, err
	}
	nBytes, err := writer.Write(phase2.Hash)
	return int64(nBytes) + n, err
}

func (c *Phase2) writeTo(writer io.Writer) (int64, error) {
	enc := curve.NewEncoder(writer)
	toEncode := []interface{}{
		&c.PublicKey.SG,
		&c.PublicKey.SXG,
		&c.PublicKey.XR,
		&c.Parameters.G1.Delta,
		c.Parameters.G1.L,
		c.Parameters.G1.Z,
		&c.Parameters.G2.Delta,
	}

	for _, v := range toEncode {
		if err := enc.Encode(v); err != nil {
			return enc.BytesWritten(), err
		}
	}

	return enc.BytesWritten(), nil
}

// ReadFrom implements io.ReaderFrom
func (c *Phase2) ReadFrom(reader io.Reader) (int64, error) {
	dec := curve.NewDecoder(reader)
	toEncode := []interface{}{
		&c.PublicKey.SG,
		&c.PublicKey.SXG,
		&c.PublicKey.XR,
		&c.Parameters.G1.Delta,
		&c.Parameters.G1.L,
		&c.Parameters.G1.Z,
		&c.Parameters.G2.Delta,
	}

	for _, v := range toEncode {
		if err := dec.Decode(v); err != nil {
			return dec.BytesRead(), err
		}
	}

	c.Hash = make([]byte, 32)
	n, err := reader.Read(c.Hash)
	return int64(n) + dec.BytesRead(), err

}

// WriteTo implements io.WriterTo
func (c *Phase2Evaluations) WriteTo(writer io.Writer) (int64, error) {
	enc := curve.NewEncoder(writer)
	toEncode := []interface{}{
		c.G1.A,
		c.G1.B,
		c.G2.B,
	}

	for _, v := range toEncode {
		if err := enc.Encode(v); err != nil {
			return enc.BytesWritten(), err
		}
	}

	return enc.BytesWritten(), nil
}

// ReadFrom implements io.ReaderFrom
func (c *Phase2Evaluations) ReadFrom(reader io.Reader) (int64, error) {
	dec := curve.NewDecoder(reader)
	toEncode := []interface{}{
		&c.G1.A,
		&c.G1.B,
		&c.G2.B,
	}

	for _, v := range toEncode {
		if err := dec.Decode(v); err != nil {
			return dec.BytesRead(), err
		}
	}

	return dec.BytesRead(), nil
}

// appendRefsToSlice appends references to values in x to s
func (x *valueUpdate) appendRefsToSlice(s []interface{}) []interface{} {
	s = append(s, &x.contributionCommitment, &x.contributionPok, &x.updatedCommitment.g1)
	if x.updatedCommitment.g2 != nil {
		return append(s, x.updatedCommitment.g2)
	}
	return s
}
