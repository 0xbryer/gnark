package test

import (
	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark/frontend"
	"github.com/consensys/gnark/frontend/cs/scs"
	"github.com/stretchr/testify/assert"
	"math/big"
	"testing"

	"github.com/consensys/gnark/backend/plonk"
)

type commitmentCircuit struct {
	X []frontend.Variable
}

func (c *commitmentCircuit) Define(api frontend.API) error {
	commitment, err := api.Commit(c.X...)
	if err == nil {
		api.AssertIsDifferent(commitment, 0)
	}
	return err
}

func (c *commitmentCircuit) hollow() frontend.Circuit {
	return &commitmentCircuit{make([]frontend.Variable, len(c.X))}
}

func TestSingleCommitmentPlonk(t *testing.T) {
	assignment := &commitmentCircuit{[]frontend.Variable{1}}
	plonkTest(t, assignment.hollow(), assignment)
}

func TestFiveCommitmentsPlonk(t *testing.T) {
	assignment := &commitmentCircuit{[]frontend.Variable{1, 2, 3, 4, 5}}
	plonkTest(t, assignment.hollow(), assignment)
}

type noCommitmentCircuit struct {
	X frontend.Variable
}

func (c *noCommitmentCircuit) Define(api frontend.API) error {
	api.AssertIsEqual(c.X, 1)
	api.AssertIsEqual(c.X, 1)
	return nil
}

func TestNoCommitmentCircuitPlonk(t *testing.T) {
	plonkTest(t, &noCommitmentCircuit{}, &noCommitmentCircuit{1})
}

func plonkTest(t *testing.T, circuit, assignment frontend.Circuit) {

	fr := []ecc.ID{
		/*ecc.BN254,
		ecc.BLS12_381,
		ecc.BLS12_377,
		ecc.BLS24_315,
		//ecc.BLS12_378, TODO: @Tabaie Not autogenerated?
		ecc.BLS24_317,
		ecc.BW6_633,*/
		//ecc.BW6_756, TODO: @Tabaie Not autogenerated?
		ecc.BW6_761,
	}

	run := func(mod *big.Int) func(t *testing.T) {
		return func(t *testing.T) {
			ccs, err := frontend.Compile(mod, scs.NewBuilder, circuit)
			assert.NoError(t, err)

			witnessFull, err := frontend.NewWitness(assignment, mod)
			assert.NoError(t, err)
			witnessPublic, err := witnessFull.Public()
			assert.NoError(t, err)

			srs, err := NewKZGSRS(ccs)
			assert.NoError(t, err)

			pk, vk, err := plonk.Setup(ccs, srs)
			assert.NoError(t, err)

			proof, err := plonk.Prove(ccs, pk, witnessFull)
			assert.NoError(t, err)

			err = plonk.Verify(proof, vk, witnessPublic)
			assert.NoError(t, err)
		}
	}

	for _, id := range fr {
		t.Run(id.String(), run(id.ScalarField()))
	}
}
