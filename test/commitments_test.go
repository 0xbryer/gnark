package test

import (
	"fmt"
	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark/backend"
	"github.com/consensys/gnark/frontend"
	"github.com/consensys/gnark/frontend/cs/scs"
	"github.com/stretchr/testify/assert"
	"math/big"
	"reflect"
	"strings"
	"testing"

	"github.com/consensys/gnark/backend/plonk"
)

type commitmentCircuit struct {
	Public []frontend.Variable `gnark:",public"`
	X      []frontend.Variable
}

func (c *commitmentCircuit) Define(api frontend.API) error {

	commitment, err := tryCommit(api, c.X...)
	if err != nil {
		return err
	}
	api.AssertIsDifferent(commitment, c.X[0])
	for _, p := range c.Public {
		api.AssertIsDifferent(p, 0)
	}
	return err
}

func TestSingleCommitment(t *testing.T) {
	assignment := &commitmentCircuit{X: []frontend.Variable{1}, Public: []frontend.Variable{}}
	e2eTest(t, assignment)
}

func TestFiveCommitments(t *testing.T) {
	assignment := &commitmentCircuit{X: []frontend.Variable{1, 2, 3, 4, 5}, Public: []frontend.Variable{}}
	e2eTest(t, assignment)
}

func TestSingleCommitmentSinglePublic(t *testing.T) {
	assignment := &commitmentCircuit{X: []frontend.Variable{0}, Public: []frontend.Variable{1}}
	e2eTest(t, assignment)
}

func TestFiveCommitmentsFivePublic(t *testing.T) {
	assignment := &commitmentCircuit{X: []frontend.Variable{0, 1, 2, 3, 4}, Public: []frontend.Variable{1, 2, 3, 4, 5}}
	e2eTest(t, assignment)
}

type noCommitmentCircuit struct {
	X frontend.Variable
}

func (c *noCommitmentCircuit) Define(api frontend.API) error {
	api.AssertIsEqual(c.X, 1)
	api.AssertIsEqual(c.X, 1)
	return nil
}

func TestNoCommitmentCircuit(t *testing.T) {
	e2eTest(t, &noCommitmentCircuit{1})
}

var fr = []ecc.ID{
	ecc.BN254,
	ecc.BLS12_381,
	ecc.BLS12_377,
	ecc.BLS24_315,
	//ecc.BLS12_378, TODO: @Tabaie Not autogenerated?
	ecc.BLS24_317,
	ecc.BW6_633,
	//ecc.BW6_756, TODO: @Tabaie Not autogenerated?
	ecc.BW6_761,
}

func plonkTest(t *testing.T, circuit, assignment frontend.Circuit) {

	run := func(mod *big.Int) func(t *testing.T) {
		return func(t *testing.T) {
			ccs, err := frontend.Compile(mod, scs.NewBuilder, circuit)
			assert.NoError(t, err)

			witnessFull, err := frontend.NewWitness(assignment, mod)
			assert.NoError(t, err)
			witnessPublic, err := witnessFull.Public()
			assert.NoError(t, err)

			srs, err := NewKZGSRS(ccs)
			assert.NoError(t, err)

			pk, vk, err := plonk.Setup(ccs, srs)
			assert.NoError(t, err)

			proof, err := plonk.Prove(ccs, pk, witnessFull)
			assert.NoError(t, err)

			err = plonk.Verify(proof, vk, witnessPublic)
			assert.NoError(t, err)
		}
	}

	for _, id := range fr {
		t.Run(id.String(), run(id.ScalarField()))
	}
}

type committedConstantCircuit struct {
	X frontend.Variable
}

func (c *committedConstantCircuit) Define(api frontend.API) error {
	commitment, err := tryCommit(api, 1, c.X)
	if err != nil {
		return err
	}
	api.AssertIsDifferent(commitment, c.X)
	return nil
}

func TestCommittedConstant(t *testing.T) {
	e2eTest(t, &committedConstantCircuit{1})
}

type committedPublicCircuit struct {
	X frontend.Variable `gnark:",public"`
}

func (c *committedPublicCircuit) Define(api frontend.API) error {
	commitment, err := tryCommit(api, c.X)
	if err != nil {
		return err
	}
	api.AssertIsDifferent(commitment, c.X)
	return nil
}

func TestCommittedPublic(t *testing.T) {
	e2eTest(t, &committedPublicCircuit{1})
}

func tryCommit(api frontend.API, x ...frontend.Variable) (frontend.Variable, error) {
	committer, ok := api.(frontend.Committer)
	if !ok {
		return nil, fmt.Errorf("type %T doesn't impl the Committer interface", api)
	}
	return committer.Commit(x...)
}

type twoCommitCircuit struct {
	X []frontend.Variable
	Y frontend.Variable
}

func (c *twoCommitCircuit) Define(api frontend.API) error {
	c0, err := api.(frontend.Committer).Commit(c.X...)
	if err != nil {
		return err
	}
	var c1 frontend.Variable
	if c1, err = api.(frontend.Committer).Commit(c0, c.Y); err != nil {
		return err
	}
	api.AssertIsDifferent(c1, c.Y)
	return nil
}

func TestTwoCommitEngine(t *testing.T) {
	assignment := &twoCommitCircuit{X: []frontend.Variable{1, 2}, Y: 3}
	NewAssert(t).SolvingSucceeded(&twoCommitCircuit{X: make([]frontend.Variable, len(assignment.X))}, assignment, WithBackends(backend.GROTH16, backend.PLONK))
}

func TestTwoCommitPlonk(t *testing.T) {
	assignment := &twoCommitCircuit{X: []frontend.Variable{1, 2}, Y: 3}
	plonkTest(t, &twoCommitCircuit{X: make([]frontend.Variable, len(assignment.X))}, assignment)
}

func hollow(c frontend.Circuit) frontend.Circuit {
	cV := reflect.ValueOf(c).Elem()
	t := reflect.TypeOf(c).Elem()
	res := reflect.New(t)
	resE := res.Elem()
	resC := res.Interface().(frontend.Circuit)

	frontendVar := reflect.TypeOf((*frontend.Variable)(nil)).Elem()

	for i := 0; i < t.NumField(); i++ {
		fieldT := t.Field(i).Type
		if fieldT.Kind() == reflect.Slice && fieldT.Elem().Implements(frontendVar) {
			resE.Field(i).Set(reflect.ValueOf(make([]frontend.Variable, cV.Field(i).Len())))
		} else if fieldT != frontendVar {
			resE.Field(i).Set(cV.Field(i))
		}
	}

	return resC
}

func removePackageName(s string) string {
	return s[strings.LastIndex(s, ".")+1:]
}

func TestHollow(t *testing.T) {

	run := func(c, expected frontend.Circuit) func(t *testing.T) {
		return func(t *testing.T) {
			seen := hollow(c)
			assert.Equal(t, expected, seen)
		}
	}

	assignments := []frontend.Circuit{
		&committedConstantCircuit{1},
		&commitmentCircuit{X: []frontend.Variable{1}, Public: []frontend.Variable{}},
	}

	expected := []frontend.Circuit{
		&committedConstantCircuit{nil},
		&commitmentCircuit{X: []frontend.Variable{nil}, Public: []frontend.Variable{}},
	}

	for i := range assignments {
		t.Run(removePackageName(reflect.TypeOf(assignments[i]).String()), run(assignments[i], expected[i]))
	}
}

func e2eTest(t *testing.T, assignment frontend.Circuit) {
	t.Parallel()

	t.Run("fuzzer", func(t *testing.T) {
		circuit := hollow(assignment)
		NewAssert(t).ProverSucceeded(circuit, assignment, WithBackends(backend.GROTH16, backend.PLONK)) // TODO: Support PlonkFri.Commit
	})

	t.Run("plonk-e2e", func(t *testing.T) {
		circuit := hollow(assignment)
		plonkTest(t, circuit, assignment)
	})

	t.Run("groth16-e2e", func(t *testing.T) {
		circuit := hollow(assignment)
		groth16Test(t, circuit, assignment)
	})
}
