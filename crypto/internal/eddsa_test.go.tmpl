import (
	"crypto/sha256"
	"testing"


	"github.com/consensys/gnark/crypto/hash/mimc/{{ toLower .Curve }}"
	"github.com/consensys/gurvy/{{ toLower .Curve }}/fr"
)

func TestSerialization(t *testing.T) {

	var seed [32]byte
	s := []byte("eddsa")
	for i, v := range s {
		seed[i] = v
	}

	pubKey, privKey := GenerateKey(seed)
	hFunc := sha256.New()
	signature, err := Sign([]byte("message"), &privKey, hFunc)
	if err != nil {
		t.Fatal("unexpected error when signing")
	}


	var (
		rPubKey PublicKey
		rPrivKey PrivateKey
	 	rSignature Signature
	)

	rPubKey.SetBytes(pubKey.Bytes())
	rPrivKey.SetBytes(privKey.Bytes())
	rSignature.SetBytes(signature.Bytes())

	// public key
	if !rPubKey.A.Equal(&pubKey.A) {
		t.Fatal("SetBytes(Bytes(pubkey)) failed")
	}

	// signature
	if !rSignature.R.Equal(&signature.R) {
		t.Fatal("SetBytes(Bytes(signature.R)) failed")
	}
	for i := 0; i < sizeFr; i++ {
		if rSignature.S[i] != signature.S[i] {
			t.Fatal("SetBytes(Bytes(signature.S)) failed")
		}
	}

	// private key
	if !privKey.PublicKey.A.Equal(&rPrivKey.PublicKey.A) {
		t.Fatal("SetBytes(Bytes(privKey.pubkey)) failed")
	}
	for i := 0; i < 32; i++ {
		if privKey.randSrc[i] != rPrivKey.randSrc[i] {
			t.Fatal("SetBytes(Bytes(privKey.randSrc)) failed")
		}
	}
	for i := 0; i < sizeFr; i++ {
		if privKey.scalar[i] != rPrivKey.scalar[i] {
			t.Fatal("SetBytes(Bytes(signature.scalar)) failed")
		}
	}

}

func TestEddsaMIMC(t *testing.T) {

	var seed [32]byte
	s := []byte("eddsa")
	for i, v := range s {
		seed[i] = v
	}

	hFunc := {{ toLower .Curve }}.NewMiMC("seed")

	// create eddsa obj and sign a message
	pubKey, privKey := GenerateKey(seed)
	var frMsg fr.Element
	frMsg.SetString("44717650746155748460101257525078853138837311576962212923649547644148297035978")
	msgBin := frMsg.Bytes()
	signature, err := Sign(msgBin[:], &privKey, hFunc)
	if err != nil {
		t.Fatal(err)
	}

	// verifies correct msg
	res, err := Verify(signature, msgBin[:], &pubKey, hFunc)
	if err != nil {
		t.Fatal(err)
	}
	if !res {
		t.Fatal("Verifiy correct signature should return true")
	}

	// verifies wrong msg
	frMsg.SetString("44717650746155748460101257525078853138837311576962212923649547644148297035979")
	msgBin = frMsg.Bytes()
	res, err = Verify(signature, msgBin[:], &pubKey, hFunc)
	if err != nil {
		t.Fatal(err)
	}
	if res {
		t.Fatal("Verfiy wrong signature should be false")
	}

}

func TestEddsaSHA256(t *testing.T) {

	var seed [32]byte
	s := []byte("eddsa")
	for i, v := range s {
		seed[i] = v
	}

	hFunc := sha256.New()

	// create eddsa obj and sign a message
	pubKey, privKey := GenerateKey(seed)
	signature, err := Sign([]byte("message"), &privKey, hFunc)
	if err != nil {
		t.Fatal(err)
	}

	// verifies correct msg
	res, err := Verify(signature, []byte("message"), &pubKey, hFunc)
	if err != nil {
		t.Fatal(err)
	}
	if !res {
		t.Fatal("Verifiy correct signature should return true")
	}

	// verifies wrong msg
	res, err = Verify(signature, []byte("wrong_message"), &pubKey, hFunc)
	if err != nil {
		t.Fatal(err)
	}
	if res {
		t.Fatal("Verfiy wrong signature should be false")
	}

}

// benchmarks

func BenchmarkVerify(b *testing.B) {

	var seed [32]byte
	s := []byte("eddsa")
	for i, v := range s {
		seed[i] = v
	}

	hFunc := {{ toLower .Curve }}.NewMiMC("seed")

	// create eddsa obj and sign a message
	pubKey, privKey := GenerateKey(seed)
	var frMsg fr.Element
	frMsg.SetString("44717650746155748460101257525078853138837311576962212923649547644148297035978")
	msgBin := frMsg.Bytes()
	signature, _ := Sign(msgBin[:], &privKey, hFunc)

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Verify(signature, msgBin[:], &pubKey, hFunc)
	}
}
