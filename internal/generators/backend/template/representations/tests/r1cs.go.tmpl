
import (
	{{ template "import_backend" . }}
	"bytes"
	"testing"
	"reflect"
	"github.com/consensys/gnark/internal/backend/circuits"
	"github.com/consensys/gurvy"
)
func TestSerialization(t *testing.T) {
	for name, circuit := range circuits.Circuits {
		t.Run(name, func(t *testing.T) {
			r1cs := circuit.R1CS.ToR1CS(gurvy.{{.Curve}})
			var buffer bytes.Buffer
			var err error
			var written, read int64
			written, err = r1cs.WriteTo(&buffer)
			if err != nil {
				t.Fatal(err)
			}
			var reconstructed {{ toLower .Curve}}backend.R1CS
			read , err = reconstructed.ReadFrom(&buffer)
			if err != nil {
				t.Fatal(err)
			}
			if written != read {
				t.Fatal("didn't read same number of bytes we wrote")
			}
			// compare both
			if !reflect.DeepEqual(r1cs, &reconstructed) {
				t.Fatal("round trip serialization failed")
			}
		})
	}
}