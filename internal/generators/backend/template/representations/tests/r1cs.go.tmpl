
import (
	"bytes"
	"testing"
	"reflect"
	"github.com/consensys/gnark/backend"
	"github.com/consensys/gnark/frontend"
	"github.com/consensys/gnark/internal/backend/circuits"
	"github.com/consensys/gnark-crypto/ecc"

	{{ template "import_backend_cs" . }}
)
func TestSerialization(t *testing.T) {
	var buffer bytes.Buffer
	for name, circuit := range circuits.Circuits {
		buffer.Reset()

		{{if eq .Curve "BW6-761"}}
			if testing.Short() && name != "reference_small" {
				continue
			}
		{{end}}
	
		r1cs, err := frontend.Compile(ecc.{{.CurveID}}, backend.GROTH16, circuit.Circuit)
		if err != nil {
			t.Fatal(err)
		}
		if testing.Short() && r1cs.GetNbConstraints() > 50 {
			continue
		}

		r1cs.SetLoggerOutput(nil) // no need to serialize.

		{
			t.Log(name)
			var err error
			var written, read int64
			written, err = r1cs.WriteTo(&buffer)
			if err != nil {
				t.Fatal(err)
			}
			var reconstructed cs.R1CS
			read , err = reconstructed.ReadFrom(&buffer)
			if err != nil {
				t.Fatal(err)
			}
			if written != read {
				t.Fatal("didn't read same number of bytes we wrote")
			}
			// compare both
			if !reflect.DeepEqual(r1cs, &reconstructed) {
				t.Fatal("round trip serialization failed")
			}
		}
	}
}