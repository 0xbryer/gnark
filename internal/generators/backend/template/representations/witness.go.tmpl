import (
    "reflect"
    "errors"

    "github.com/consensys/gnark/backend"
	"github.com/consensys/gnark/frontend"
    "github.com/consensys/gnark/internal/parser"

	{{ template "import_fr" . }}
)

// Full extracts the full witness secret || public (including ONE_WIRE)
// and returns a slice of field elements in montgomery form
func Full(w frontend.Witness) ([]fr.Element, error)  {
    nbSecret, nbPublic, err := count(w)
    if err != nil {
        return nil, err
    }
    secret := make([]fr.Element, nbSecret)
    public := make([]fr.Element, nbPublic +1 ) // ONE_WIRE
    public[0] = fr.One()

    var i, j int 
    j++
    var collectHandler parser.LeafHandler = func(visibility backend.Visibility, name string, tInput reflect.Value) error {
        v := tInput.Interface().(frontend.Variable)

        val := frontend.GetAssignedValue(v)
        if val == nil {
            return errors.New("variable " + name + " not assigned")
        }

        if visibility == backend.Secret {
            secret[i].SetInterface(val) 
            i++
        } else if visibility == backend.Public {
            public[j].SetInterface(val) 
            j++
        }
        return nil
    }
    if err := parser.Visit(w, "", backend.Unset, collectHandler, reflect.TypeOf(frontend.Variable{})); err != nil {
        return nil, err 
    }
    return append(secret, public...), nil 
}

// Public extracts the public witness (including ONE_WIRE)
// and returns a slice of field elements in REGULAR form 
func Public(w frontend.Witness) ([]fr.Element, error) {
    _, nbPublic, err := count(w)
    if err != nil {
        return nil, err
    }
    public := make([]fr.Element, nbPublic +1 ) // ONE_WIRE
    public[0] = fr.One()
    public[0].FromMont()
    
    var  j int 
    j++
    var collectHandler parser.LeafHandler = func(visibility backend.Visibility, name string, tInput reflect.Value) error {
        

       if visibility == backend.Public {
            v := tInput.Interface().(frontend.Variable)
            val := frontend.GetAssignedValue(v)
            if val == nil {
                return errors.New("variable " + name + " not assigned")
            }
            public[j].SetInterface(val).FromMont() 
            j++
        }
        return nil
    }
    if err := parser.Visit(w, "", backend.Unset, collectHandler, reflect.TypeOf(frontend.Variable{})); err != nil {
        return nil, err 
    }
    return public, nil 
}


func count(w frontend.Witness) (nbSecret, nbPublic int, err error) {
    var collectHandler parser.LeafHandler = func(visibility backend.Visibility, name string, tInput reflect.Value) error {
        if visibility == backend.Secret {
            nbSecret++
        } else if visibility == backend.Public {
            nbPublic++
        }
        return nil
    }
    err = parser.Visit(w, "", backend.Unset, collectHandler, reflect.TypeOf(frontend.Variable{}))
    return 
}
