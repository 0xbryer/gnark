
import (
	"github.com/consensys/gnark/crypto/polynomial"
	"github.com/consensys/gnark/crypto/polynomial/{{ toLower .Curve }}"
	"github.com/consensys/gnark/internal/backend/{{ toLower .Curve }}/cs"
	"github.com/consensys/gnark/internal/backend/{{ toLower .Curve }}/fft"
	"github.com/consensys/gurvy/{{ toLower .Curve }}/fr"
)

// PublicRaw represents the raw public data corresponding to a circuit,
// which consists of the LDE of qr,ql,qm,qo,k of a sparse R1cs. The compact
// version of public data consists of commitments of qr,ql,qm,qo,k.
type PublicRaw struct {

	// Commitment scheme that is used for an instantiation of PLONK
	CommitmentScheme polynomial.CommitmentScheme

	// LDE of qr,ql,qm,qo,k (so all polynomials are in Lagrange basis)
	Ql, Qr, Qm, Qo, Qk {{ toLower .Curve }}.Poly

	// Domains used for the FFTs
	DomainNum, DomainH *fft.Domain

	// TODO add the permutation
}

// Setup from a sparseR1CS, it returns ql, qr, qm, qo, k in
// the canonical basis.
func Setup(spr *cs.SparseR1CS, polynomialCommitment polynomial.CommitmentScheme) *PublicRaw {

	nbConstraints := len(spr.Constraints)
	nbAssertions := len(spr.Assertions)

	var res PublicRaw

	// fft domains
	sizeSystem := uint64(nbConstraints + nbAssertions)
	res.DomainNum = fft.NewDomain(sizeSystem, 2)
	res.DomainH = fft.NewDomain(2*sizeSystem, 1)

	// commitment scheme
	res.CommitmentScheme = polynomialCommitment

	// public polynomials
	res.Ql = make([]fr.Element, res.DomainNum.Cardinality)
	res.Qr = make([]fr.Element, res.DomainNum.Cardinality)
	res.Qm = make([]fr.Element, res.DomainNum.Cardinality)
	res.Qo = make([]fr.Element, res.DomainNum.Cardinality)
	res.Qk = make([]fr.Element, res.DomainNum.Cardinality)
	for i := 0; i < nbConstraints; i++ {

		res.Ql[i].Set(&spr.Coefficients[spr.Constraints[i].L.CoeffID()])
		res.Qr[i].Set(&spr.Coefficients[spr.Constraints[i].R.CoeffID()])
		res.Qm[i].Set(&spr.Coefficients[spr.Constraints[i].M[0].CoeffID()]).
			Mul(&res.Qm[i], &spr.Coefficients[spr.Constraints[i].M[1].CoeffID()])
		res.Qo[i].Set(&spr.Coefficients[spr.Constraints[i].O.CoeffID()])
		res.Qk[i].Set(&spr.Coefficients[spr.Constraints[i].K])
	}
	for i := 0; i < nbAssertions; i++ {

		index := nbConstraints + i

		res.Ql[index].Set(&spr.Coefficients[spr.Assertions[i].L.CoeffID()])
		res.Qr[index].Set(&spr.Coefficients[spr.Assertions[i].R.CoeffID()])
		res.Qm[index].Set(&spr.Coefficients[spr.Assertions[i].M[0].CoeffID()]).
			Mul(&res.Qm[index], &spr.Coefficients[spr.Assertions[i].M[1].CoeffID()])
		res.Qo[index].Set(&spr.Coefficients[spr.Assertions[i].O.CoeffID()])
		res.Qk[index].Set(&spr.Coefficients[spr.Assertions[i].K])
	}

	res.DomainNum.FFTInverse(res.Ql, fft.DIF, 0)
	res.DomainNum.FFTInverse(res.Qr, fft.DIF, 0)
	res.DomainNum.FFTInverse(res.Qm, fft.DIF, 0)
	res.DomainNum.FFTInverse(res.Qo, fft.DIF, 0)
	res.DomainNum.FFTInverse(res.Qk, fft.DIF, 0)
	fft.BitReverse(res.Ql)
	fft.BitReverse(res.Qr)
	fft.BitReverse(res.Qm)
	fft.BitReverse(res.Qo)
	fft.BitReverse(res.Qk)

	return &res
}
