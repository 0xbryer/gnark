{{ $Curve := toLower .Curve }}

import (
	"testing"

	"github.com/consensys/gnark/backend"
	"github.com/consensys/gnark/backend/plonk"
	mockcommitment "github.com/consensys/gnark/crypto/polynomial/{{ toLower .Curve }}/mock_commitment"
	"github.com/consensys/gnark/frontend"
	"github.com/consensys/gnark/internal/backend/{{ toLower .Curve }}/cs"
	plonk{{ toLower .Curve }} "github.com/consensys/gnark/internal/backend/{{ toLower .Curve }}/plonk"
	"github.com/consensys/gnark/internal/backend/circuits"
	curve "github.com/consensys/gurvy/{{ toLower .Curve }}"
)

func TestCircuits(t *testing.T) {
	for name, circuit := range circuits.Circuits {
		t.Run(name, func(t *testing.T) {
			assert := plonk.NewAssert(t)
			pcs, err := frontend.Compile(curve.ID, backend.PLONK, circuit.Circuit)
			assert.NoError(err)
			assert.SolvingSucceeded(pcs, circuit.Good)
			assert.SolvingFailed(pcs, circuit.Bad)
		})
	}
}

// TODO WIP -> once everything is clean move this to backend/plonk in assert
func TestProver(t *testing.T) {

	{{- if eq $Curve "bw761" }}
	t.Skip("skip for bw761")
	{{- end }}

	for name, circuit := range circuits.Circuits {
		// name := "range"
		// circuit := circuits.Circuits[name]

		t.Run(name, func(t *testing.T) {

			assert := plonk.NewAssert(t)
			pcs, err := frontend.Compile(curve.ID, backend.PLONK, circuit.Circuit)
			assert.NoError(err)

			spr := pcs.(*cs.SparseR1CS)

			scheme := mockcommitment.Scheme{}

			publicData := plonk{{ toLower .Curve }}.SetupRaw(spr, &scheme, circuit.Public)

			// correct proofs
			{
				proof := plonk{{ toLower .Curve }}.ProveRaw(spr, publicData, circuit.Good)

				v := plonk{{ toLower .Curve }}.VerifyRaw(proof, publicData, circuit.Public)

				if !v {
					t.Fatal("Correct proof verification failed")
				}
			}

			//wrong proof
			{
				proof := plonk{{ toLower .Curve }}.ProveRaw(spr, publicData, circuit.Bad)

				v := plonk{{ toLower .Curve }}.VerifyRaw(proof, publicData, circuit.Public)

				if v {
					t.Fatal("Wrong proof verification should have failed")
				}
			}
		})

	}
}
