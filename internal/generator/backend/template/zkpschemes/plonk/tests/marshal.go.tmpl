
import (
	{{ template "import_fft" . }}
    {{ template "import_fr" . }}

	"bytes"
	"reflect"


	"testing"
)


func TestPublicRawSerialization(t *testing.T) {

    // create a random PublicRaw
    var p PublicRaw 
    p.DomainNum = *fft.NewDomain(8, 1, true)
    p.DomainH = *fft.NewDomain(8, 2, false)
    p.Ql = make([]fr.Element, p.DomainNum.Cardinality)
    p.Qr = make([]fr.Element, p.DomainNum.Cardinality)
    p.Qm = make([]fr.Element, p.DomainNum.Cardinality)
    p.Qo = make([]fr.Element, p.DomainNum.Cardinality)
    p.Qo[0] = p.DomainNum.Generator
    p.Qk = make([]fr.Element, p.DomainNum.Cardinality)
    p.Shifter[0] = p.DomainH.Generator


    p.LS1 = make([]fr.Element, p.DomainH.Cardinality)
    p.LS2 = make([]fr.Element, p.DomainH.Cardinality)
    p.LS3 = make([]fr.Element, p.DomainH.Cardinality)
    p.CS1 = make([]fr.Element, p.DomainH.Cardinality)
    p.CS2 = make([]fr.Element, p.DomainH.Cardinality)
    p.CS3 = make([]fr.Element, p.DomainH.Cardinality)

    p.Permutation = make([]int64, 42)
    p.Permutation[34]= 12
    p.Permutation[41]= -1


    var buf bytes.Buffer
    written, err := p.WriteTo(&buf)
    if err != nil {
        t.Fatal("coudln't serialize", err)
    }
			
    var reconstructed PublicRaw 

    read, err := reconstructed.ReadFrom(&buf)
    if err != nil {
       t.Fatal("coudln't deserialize", err)
    }

    if !reflect.DeepEqual(&p, &reconstructed) {
        t.Fatal("reconstructed object don't match original")
    }

    if written != read {
        t.Fatal("bytes written / read don't match")
    }
}

